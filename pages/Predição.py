# Libs
import joblib
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta

# Dataviz libs
import plotly.graph_objects as go
import plotly.express as px

# Functions
from project.get_data import GetIPEAData


def highlight_min(s):
    '''FunÃ§Ã£o para destacar o menor valor de cada linha, exceto a primeira coluna de um dataframe'''
    return 'background-color: #0057B8'


# ConfiguraÃ§Ãµes da pÃ¡gina
st.set_page_config(page_title="InÃ­cio", page_icon="ðŸ”®", layout="wide")
st.write("# Predizendo os dados do PetrÃ³leo Brent ðŸ”®")


# CriaÃ§Ã£o das guias
tab1, tab2= st.tabs(
    ["PrediÃ§Ã£o", "Modelos"]
)

with tab1:
    if "df_data" not in st.session_state:
        # Dados
        # st.session_state.df_data = pd.read_csv("source\ipea_brent_oil.csv", sep=",")
        # st.session_state.df_data = st.session_state.df_data['date'] = pd.to_datetime(st.session_state.df_data['date'], format='%Y-%m-%d')
        ipea = GetIPEAData(
                    ipea_table="EIA366_PBRENT366",
                    database_path="source\ipea_brent_oil.csv"
                )
        st.session_state.df_data = ipea.df_brent_oil

    # Texto da SugestÃ£o do Modelo
    st.header("Seasonal Window Average")
    st.write(
        "O modelo escolhido para prever os valores diÃ¡rios do PetrÃ³leo Brent foi o Seasonal Window Average, devido a ser o modelo com os melhores resultados nas mÃ©tricas de avaliaÃ§Ã£o (consulte a aba de Modelos para ver os resultados)."
    )
    st.write(
        "O modelo faz uma previsÃ£o diÃ¡ria dos prÃ³ximos 7 dias de acordo com o dia atual."
    )

    model_swa = joblib.load('swa.joblib')
    df_pred = model_swa.predict(h=90, level=[95])


    # Dados preditos
    df_pred = df_pred[(df_pred['ds'] > datetime.today()) & (df_pred['ds'] < datetime.today() + timedelta(8))]

    fig = px.line(df_pred, x='ds', y='SeasWA', hover_data=['SeasWA'])

    for i in range(0, df_pred.shape[0]):
        fig.add_trace(
            go.Scatter(
                x=[df_pred['ds'].iloc[-i]],
                y=[df_pred['SeasWA'].iloc[-i]],
                text=[df_pred['SeasWA'].iloc[-i]],
                mode='markers+text',
                marker=dict(color='white', size=10),
                textfont=dict(color='white', size=15),
                textposition='top right',
                showlegend=False
            )
        )

    fig.update_layout(
        title='PrediÃ§Ã£o de valores dos prÃ³ximos 7 dias',
        title_x=0.5,
        title_font=dict(size=24),
        width=2000, 
        height=500,
        template='plotly_dark'
        )

    fig.update_xaxes(
        title='Valor Predito',
        title_font=dict(size=18)
        )

    fig.update_yaxes(
        title='Data',
        title_font=dict(size=18)
        )

    st.plotly_chart(fig, use_container_width=True)


with tab2:
    # Texto da SugestÃ£o do Modelo
    st.header("ComentÃ¡rios")
    st.write(
        "De acordo com os resultados apresentados pelos diversos testes em modelos diferentes de machine learning para sÃ©ries temporais, elaboramos um resumo com um quadro comparativo para cada uma das anÃ¡lises qual seria a nossa recomendaÃ§Ã£o quanto ao modelo preditivo mais aderente para prever os valores diÃ¡rios do PetrÃ³leo Brent."
    )
    st.write(
        "O quadro-resumo Ã© composto com as principais mÃ©tricas de desempenho para avaliar e comparar os modelos de forecasting de sÃ©ries temporais."
    )

    # MÃ©tricas de avaliaÃ§Ã£o dos modelos (Treino dos dados 2018-2023)
    st.header('MÃ©tricas de AvaliaÃ§Ã£o dos Modelos')
    df_metrics = pd.read_csv(r'source/model_metrics.csv', sep='|')

    # Estilo de formataÃ§Ã£o condicional ao DataFrame
    styled_df = df_metrics.style.applymap(highlight_min, subset=pd.IndexSlice[:, ['Seasonal Naive', 'Seasonal Window Average']])
    st.dataframe(styled_df)

    # Legenda
    st.divider()
    st.markdown(
        '''
        ### Legenda das Siglas de MÃ©tricas
        **MAE (Mean Absolute Error)**: Este Ã© o erro mÃ©dio absoluto entre as previsÃµes e os valores reais. Um MAE mais baixo Ã© geralmente melhor.

        **MSE (Mean Squared Error)**: Ã‰ a mÃ©dia dos erros ao quadrado. DÃ¡ mais peso a erros grandes e Ã© mais sensÃ­vel a variaÃ§Ãµes.

        **RMSE (Root Mean Squared Error)**: Ã‰ a raiz quadrada do MSE e fornece uma medida da magnitude dos erros de previsÃ£o.

        **MAPE (Mean Absolute Percentage Error)**: Este Ã© o erro mÃ©dio absoluto expresso como uma porcentagem. Ã‰ Ãºtil para comparar erros entre diferentes escalas.

        **WMAPE (Weighted Mean Absolute Percentage Error)**: Similar ao MAPE, mas pondera os erros com base na magnitude dos valores reais, oferecendo uma mÃ©trica mais balanceada.
        '''
    )